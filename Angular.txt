<!-- Note: You will not understand this... Only for my reference-->



import { getCurrencySymbol } from '@angular/common';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-test',
  // templateUrl: './test.component.html',  // link to file or write code here using `back tick`
  // template and templateurl 
  template: `
  <h2>
  Welcome {{name}} 
  </h2>
  <h2 [style.color]= "'orange'">Style Binding</h2>
  <h2 [style.color]= "hasError ? 'red': 'green' " >Style Binding</h2>
  <h2 [style.color]= "highlightColor">Style binding 2</h2>
  <h2 [ngStyle]= "titleStyle">Style Binding 3 </h2>
  `, 


 
//{{ To make it dynamic--  name variable is below}}
// evaluates expression inside {{ }}
//assignment of var inside {{ }} is not possible

  // <h2>{{ 2+2 }}</h2>
  // <h2>{{ "Welcome "+ name}}</h2>
  // <h2>{{name.length}}</h2>
  // <h2>{{ name.toUpperCase() }}</h2>
  // <h2>{{ greetUser() }}</h2>

//cannot use javascript global variables--  use it in below class and bind it using a var
 // <h2>{{ site }}</h2>

// [] or bind-  -> used for property binding

//<input bind-disabled="isDisabled" id="{{myId}}" type="text" value="Arjun">
//<input [id]="myId" type="text" value="Arjun">

//ng class binding
// <h2 class="text-success">Code</h2>
// <h2 [class]="successClass">Code</h2>
// <h2 [ngClass]="messageClass">Code</h2>


  // $event gives info about the dom event that was raised  -- not able to use $event
  // <h2>
  // Welcome {{name}} 
  // </h2>
  // <button (click) = "onClick($event)"> Greet </button>
  // <button (click) = "greeting= 'Welcome Arjun'"> Greet </button>
  // {{greeting}}


  // TWO-WAY binding
  // <input [(ngModel)] = "name" type="text">
  // {{name}}  -- name var should be empty in class below
  //whatever input is entered the same will be written next to it


//STRUCTURAL DIRECTIVES
  //Add or remove HTML elements

  //ngIf  - if false the element will be removed from dom 
    // put this in class -- displayName = true;
    // <div *ngIf="displayName; then thenBlock; else elseBlock"></div>

    // <ng-template #thenBlock>
    //   <h2 >
    //     Angular 
    //   </h2>
    // </ng-template>

    // <ng-template #elseBlock>
    //   <h2>
    //     name is hidden
    //   </h2>
    // </ng-template>

  //ngSwitch
  //  public color = "red";
    //   <div [ngSwitch]="color">

    //   <div *ngSwitchCase="'red'">You picked red color </div>
    //   <div *ngSwitchCase="'blue'">You picked blue color </div>
    //   <div *ngSwitchCase="'green'">You picked green color </div>
    //   <div *ngSwitchDefault>Pick again  </div>
    // </div>


  //ngFor
  //public colors = ['red', 'blue', 'green', 'yellow'];
  // for loop over array , first element, last element, index of array, odd or even

    //   <div *ngFor="let color of colors; index as i; first as f; last as l; odd as o">
    //   <h2>{{f}} {{i}} {{color}} {{l}} {{o}}</h2>
    // </div>


//COMPONENT INTERACTION
      //in app.component.html -- <app-test  [parentData]="name"></app-test>
      // <app-test (childEvent)="message=$event" [parentData]="name"></app-test>
      //in app.component.ts -- export class AppComponent {
                                //   title = 'helloworld';
                                //   public name = 'Arjun';
                                // }

      // <h2>{{"Hello " + parentData}}</h2>
      // @Input() public parentData:any;
      
      // import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';

  //child component sends data to parent component using events
    //@Output() public childEvent = new EventEmitter();
    // <button (click) ="fireEvent()">Send Event </button>
        // fireEvent(){
        //   this.childEvent.emit('Heyy');
        // }

  //PIPES allow us to transform data before displaying them in view
    //STRING PIPES
    // <h2>{{name | lowercase}}</h2>
    // <h2>{{name | uppercase}}</h2>
    // <h2>{{message |titlecase}}</h2>
    // <h2>{{name | slice:3}}</h2>
    // <h2>{{name | slice:3:5}}</h2>
    // <h2>{{person | json}}</h2>

    //NUMBER PIPES
      // number : minimum num of integer digit.min num of decimal-max num of decimal
        // <h2>{{ 5.456 | number:'1.2-3'}}</h2>
        // <h2>{{ 5.456 | number:'3.4-5'}}</h2>
        // <h2>{{ 5.456 | number:'3.1-2'}}</h2>
    
    //other pipes
        // <h2>{{ 0.25 | percent}}</h2>
        // <h2>{{ 0.25 | currency}}</h2>
        // <h2>{{ 0.25 | currency: 'GBP'}}</h2>
        // <h2>{{ 0.25 | currency: 'EUR'}}</h2>
        // <h2>{{ 0.25 | currency: 'GBP': 'code'}}</h2>
    
        // <h2>{{ date }}</h2>
        // <h2>{{ date | date:'short'}}</h2>
        // <h2>{{ date | date:'shortDate'}}</h2>
        // <h2>{{ date | date:'shortTime'}}</h2>





  // styleUrls: ['./test.component.css']

  styles: [`
    .text-success{
      color: green;
    }
    .text-danger{
      color: red;
    }
    .text-special{
      font-style: italic;
    }
  `]
})
export class TestComponent implements OnInit {
  
   public name = "Arjun";
  // public site = window.location.href;
  // public myId = "testId";

  // public isDisabled = true;
  public successClass = "text-success";


  //ng class 
  public hasError = true;
  public isSpecial= true;
  // public messageClass={
  //   "text-success": !this.hasError,
  //   "text-danger": this.hasError,
  //   "text-special": this.isSpecial
  // }

  public highlightColor = 'orange';
  public titleStyle = {
    color: 'blue',
    fontStyle: 'italic'
  }


  

  constructor() {
  
   }
  ngOnInit(): void {
  }

  // greetUser(){
  //    return "Hello "+this.name;
  // }


}
